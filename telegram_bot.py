import urllib.parse
import gspread
from fastapi import FastAPI
import uvicorn

# —Å–æ–∑–¥–∞–µ–º FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
api_app = FastAPI()

@api_app.get("/ping")
async def ping():
    return {"status": "alive"}

def get_all_month_sheets():
    spreadsheet = gc.open("–ê–≤—Ç–æ—à–∫–æ–ª–∞ - –ó–∞–ø–∏—Å—å")
    return [sheet for sheet in spreadsheet.worksheets() if " - 202" in sheet.title and sheet.title != "–ê—Ä—Ö–∏–≤"]

def append_to_archive():
    spreadsheet = gc.open("–ê–≤—Ç–æ—à–∫–æ–ª–∞ - –ó–∞–ø–∏—Å—å")
    try:
        archive = spreadsheet.worksheet("–ê—Ä—Ö–∏–≤")
    except gspread.exceptions.WorksheetNotFound:
        archive = spreadsheet.add_worksheet("–ê—Ä—Ö–∏–≤", rows="1000", cols="11")
        archive.append_row([
            "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–ú–∞—à–∏–Ω–∞", "–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å",
            "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "", "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "–û—Å—Ç–∞—Ç–æ–∫", "Telegram ID"
        ])

    existing_rows = archive.get_all_values()
    existing_set = set(tuple(row) for row in existing_rows[1:])  # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

    for sheet in get_all_month_sheets():
        data = sheet.get_all_values()
        for row in data[1:]:  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if tuple(row) not in existing_set:
                archive.append_row(row)

import os, json
import datetime

def get_active_sheet_name():
    ru_months = {
        "January": "–Ø–Ω–≤–∞—Ä—å", "February": "–§–µ–≤—Ä–∞–ª—å", "March": "–ú–∞—Ä—Ç",
        "April": "–ê–ø—Ä–µ–ª—å", "May": "–ú–∞–π", "June": "–ò—é–Ω—å",
        "July": "–ò—é–ª—å", "August": "–ê–≤–≥—É—Å—Ç", "September": "–°–µ–Ω—Ç—è–±—Ä—å",
        "October": "–û–∫—Ç—è–±—Ä—å", "November": "–ù–æ—è–±—Ä—å", "December": "–î–µ–∫–∞–±—Ä—å"
    }
    month = datetime.datetime.now().strftime("%B")
    year = datetime.datetime.now().year
    return f"{ru_months[month]} - {year}"

from google.oauth2.service_account import Credentials

# ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏ –æ–±–∞ scope'–∞
scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

with open("comisiituairkaz-da1a299ae5c8.json") as f:
    creds_dict = json.load(f)

creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)

gc = gspread.authorize(creds)

import logging
import asyncio
from pytz import timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes, JobQueue
)

logging.basicConfig(level=logging.INFO)

TOKEN = "8055643472:AAE-p7kVsyzHnUeFPgM1hnB7Q1Uu5LebPwQ"

INSTRUCTOR, CAR, DATE, TIME, NAME, PHONE = range(6)

# –®–∞–≥ 1: –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["–°–µ—Ä–∏–∫ –ú–æ–ª–¥–∞–±–∞–µ–≤"], ["”ò–∑–≥–µ–ª –ë–µ–≥–ª–∞–Ω"]]
    await update.message.reply_photo(
        photo="https://images2.imgbox.com/96/ac/8W57PB76_o.jpg",
        caption="–°–µ—Ä–∏–∫ –ú–æ–ª–¥–∞–±–∞–µ–≤ ‚Äì –∞–≤—Ç–æ–º–∞—Ç"
    )
    await update.message.reply_photo(
        photo="https://images2.imgbox.com/ef/b3/XCTTUIuJ_o.jpg",
        caption="”ò–∑–≥–µ–ª –ë–µ–≥–ª–∞–Ω ‚Äì –∞–≤—Ç–æ–º–∞—Ç –∏ –º–µ—Ö–∞–Ω–∏–∫–∞"
    )
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return INSTRUCTOR

async def choose_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)

    instructor = update.message.text
    context.user_data["instructor"] = instructor

    if instructor == "–°–µ—Ä–∏–∫ –ú–æ–ª–¥–∞–±–∞–µ–≤":
        reply_keyboard = [["–ê–≤—Ç–æ–º–∞—Ç"], ["–ù–∞–∑–∞–¥"]]
    else:
        reply_keyboard = [["–ê–≤—Ç–æ–º–∞—Ç"], ["–ú–µ—Ö–∞–Ω–∏–∫–∞"], ["–ù–∞–∑–∞–¥"]]

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return CAR



# –®–∞–≥ 3: –≤—ã–±–æ—Ä –¥–∞—Ç—ã
async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await choose_car(update, context)

    context.user_data["car"] = update.message.text
    instructor = context.user_data["instructor"]

    records = get_active_sheet().get_all_records()
    available_dates = sorted(list(set(
        row["–î–∞—Ç–∞"] for row in records
        if row["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"] == instructor and row["–°—Ç–∞—Ç—É—Å"].lower() == "—Å–≤–æ–±–æ–¥–Ω–æ"
    )))

    if not available_dates:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
        return ConversationHandler.END

    reply_keyboard = [[d] for d in available_dates]
    reply_keyboard.append(["–ù–∞–∑–∞–¥"])

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —É—Ä–æ–∫–∞:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return DATE


# –®–∞–≥ 4: –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await choose_date(update, context)

    context.user_data["date"] = update.message.text
    instructor = context.user_data["instructor"]
    date = context.user_data["date"]

    records = get_active_sheet().get_all_records()
    available_times = [
        row["–í—Ä–µ–º—è"] for row in records
        if row["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"] == instructor and row["–î–∞—Ç–∞"] == date and row["–°—Ç–∞—Ç—É—Å"].lower() == "—Å–≤–æ–±–æ–¥–Ω–æ"
    ]

    if not available_times:
        await update.message.reply_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
        return ConversationHandler.END

    reply_keyboard = [[t] for t in available_times]
    reply_keyboard.append(["–ù–∞–∑–∞–¥"])

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return TIME



# –®–∞–≥ 5: –∏–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await choose_time(update, context)

    context.user_data["time"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:",
                                    reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], one_time_keyboard=True))

    return NAME

# –®–∞–≥ 6: —Ç–µ–ª–µ—Ñ–æ–Ω
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await get_name(update, context)

    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7707...):", reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True))
    return PHONE


# –®–∞–≥ 7: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await get_phone(update, context)

    context.user_data["phone"] = update.message.text
    context.user_data["telegram_id"] = update.effective_user.id  # ‚úÖ –®–ê–ì 1 ‚Äî –í–°–¢–ê–í–ò–¢–¨ –°–Æ–î–ê

    instructor = context.user_data["instructor"]
    car = context.user_data["car"]
    date = context.user_data["date"]
    time = context.user_data["time"]
    name = context.user_data["name"]
    phone = context.user_data["phone"]

    save_booking_to_sheet(context)

    whatsapp_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è {name} –∑–∞–ø–∏—Å–∞–ª(-–∞—Å—å) –Ω–∞ —É—Ä–æ–∫ –≤–æ–∂–¥–µ–Ω–∏—è! "
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: {instructor}, –ú–∞—à–∏–Ω–∞: {car}, –í—Ä–µ–º—è: {time}, –î–∞—Ç–∞: {date}"
    )

    encoded_message = urllib.parse.quote(whatsapp_message)
    whatsapp_url = f"https://wa.me/77070151513?text={encoded_message}"

    await update.message.reply_text(f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                                    f"üëâ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ WhatsApp:\n{whatsapp_url}")
    return ConversationHandler.END

def get_active_sheet():
    sheet = gc.open("–ê–≤—Ç–æ—à–∫–æ–ª–∞ - –ó–∞–ø–∏—Å—å")
    sheet_name = get_active_sheet_name()
    try:
        return sheet.worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        # –ï—Å–ª–∏ –ª–∏—Å—Ç–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –Ω—É–∂–Ω–æ–π —à–∞–ø–∫–æ–π
        new_sheet = sheet.add_worksheet(title=sheet_name, rows="1000", cols="11")
        new_sheet.append_row([
            "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–ú–∞—à–∏–Ω–∞", "–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å",
            "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "", "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "–û—Å—Ç–∞—Ç–æ–∫", "Telegram ID"
        ])
        return new_sheet


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—Å—Ç–µ slots
def save_booking_to_sheet(context):
    slots_sheet = get_active_sheet()

    instructor = context.user_data["instructor"]
    car = context.user_data["car"]
    date = context.user_data["date"]
    time = context.user_data["time"]
    name = context.user_data["name"]
    phone = context.user_data["phone"]
    telegram_id = context._user_id  # ‚ö†Ô∏è Telegram ID

    records = slots_sheet.get_all_records()
    for i, row in enumerate(records):
        if row["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"] == instructor and row["–î–∞—Ç–∞"] == date and row["–í—Ä–µ–º—è"] == time:
            row_num = i + 2  # —Å—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–∏—à–µ–º

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            slots_sheet.update_cell(row_num, 3, car)        # –ú–∞—à–∏–Ω–∞ (C)
            slots_sheet.update_cell(row_num, 5, "–∑–∞–Ω—è—Ç–æ")   # –°—Ç–∞—Ç—É—Å (E)
            slots_sheet.update_cell(row_num, 6, name)       # –ò–º—è (F)
            slots_sheet.update_cell(row_num, 7, phone)      # –¢–µ–ª–µ—Ñ–æ–Ω (G)
            slots_sheet.update_cell(row_num, 11, telegram_id)  # ‚úÖ Telegram ID (K, –∫–æ–ª–æ–Ω–∫–∞ ‚Ññ11)
            break


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë—Ä–æ–Ω—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    return ConversationHandler.END

async def archive_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        append_to_archive()
        await update.message.reply_text("üì¶ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {e}")

async def monitor_payments(application):
    await asyncio.sleep(10)
    sheet = get_active_sheet()
    previous = sheet.get_all_records()

    while True:
        await asyncio.sleep(30)
        current = sheet.get_all_records()

        for i, row in enumerate(current):
            if i >= len(previous):
                continue

            prev = previous[i]
            telegram_id = row.get("Telegram ID")
            if not telegram_id:
                continue

            try:
                telegram_id = int(telegram_id)
            except ValueError:
                continue

            pre_now = str(row.get("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "") or "").strip()
            pre_prev = str(prev.get("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "") or "").strip()
            ost_now = str(row.get("–û—Å—Ç–∞—Ç–æ–∫", "") or "").strip()
            ost_prev = str(prev.get("–û—Å—Ç–∞—Ç–æ–∫", "") or "").strip()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —É—Ä–æ–∫–∞
            lesson_date = row.get("–î–∞—Ç–∞")  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ—á–Ω–æ–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
            formatted_date = f" –Ω–∞ —É—Ä–æ–∫ –≤–æ–∂–¥–µ–Ω–∏—è {lesson_date}" if lesson_date else ""

            # ‚úÖ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            if pre_now and not pre_prev:
                await application.bot.send_message(
                    chat_id=telegram_id,
                    text=f"‚úÖ –í–∞—à–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {pre_now}‚Ç∏{formatted_date}"
                )

            # ‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω
            if ost_now and not ost_prev:
                await application.bot.send_message(
                    chat_id=telegram_id,
                    text=f"‚úÖ –í–∞—à –æ—Å—Ç–∞—Ç–æ–∫: {ost_now}‚Ç∏{formatted_date}"
                )

        previous = current



async def on_startup(application):
    application.create_task(monitor_payments(application))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    scheduler = AsyncIOScheduler(timezone=timezone("Asia/Almaty"))
    job_queue = JobQueue()
    job_queue.scheduler = scheduler

    app = ApplicationBuilder().token(TOKEN).job_queue(job_queue).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            INSTRUCTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_car)],
            CAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    async def post_init(application):
        application.create_task(monitor_payments(application))

    app.post_init = post_init

    # üî• –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ FastAPI, –∏ Telegram-–±–æ—Ç
    import threading
    threading.Thread(target=lambda: uvicorn.run(api_app, host="0.0.0.0", port=8000)).start()

    app.run_polling()


if __name__ == "__main__":
    main()

