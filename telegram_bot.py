from dotenv import load_dotenv
load_dotenv()

import os
import json
import asyncio
import logging
import datetime
import urllib.parse

import gspread
from google.oauth2.service_account import Credentials

from fastapi import FastAPI
from fastapi.responses import JSONResponse

from pytz import timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes, JobQueue
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("TOKEN")
creds_dict = json.loads(os.environ["GOOGLE_CREDENTIALS_JSON"])

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets ===
scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
gc = gspread.authorize(creds)

# === FastAPI –∏ Telegram ===
api_app = FastAPI()
telegram_app: Application = None

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
INSTRUCTOR, CAR, DATE, TIME, NAME, PHONE = range(6)

# === –£—Ç–∏–ª–∏—Ç—ã ===
def get_active_sheet_name():
    ru_months = {
        "January": "–Ø–Ω–≤–∞—Ä—å", "February": "–§–µ–≤—Ä–∞–ª—å", "March": "–ú–∞—Ä—Ç",
        "April": "–ê–ø—Ä–µ–ª—å", "May": "–ú–∞–π", "June": "–ò—é–Ω—å",
        "July": "–ò—é–ª—å", "August": "–ê–≤–≥—É—Å—Ç", "September": "–°–µ–Ω—Ç—è–±—Ä—å",
        "October": "–û–∫—Ç—è–±—Ä—å", "November": "–ù–æ—è–±—Ä—å", "December": "–î–µ–∫–∞–±—Ä—å"
    }
    month = datetime.datetime.now().strftime("%B")
    year = datetime.datetime.now().year
    return f"{ru_months[month]} - {year}"

def get_active_sheet():
    sheet = gc.open("–ê–≤—Ç–æ—à–∫–æ–ª–∞ - NS –ó–∞–ø–∏—Å—å")
    sheet_name = get_active_sheet_name()
    try:
        return sheet.worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        new_sheet = sheet.add_worksheet(title=sheet_name, rows="1000", cols="11")
        new_sheet.append_row([
            "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–ú–∞—à–∏–Ω–∞", "–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å",
            "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "", "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "–û—Å—Ç–∞—Ç–æ–∫", "Telegram ID"
        ])
        return new_sheet

def save_booking_to_sheet(context):
    sheet = get_active_sheet()
    data = context.user_data
    records = sheet.get_all_records()
    for i, row in enumerate(records):
        if row["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"] == data["instructor"] and row["–î–∞—Ç–∞"] == data["date"] and row["–í—Ä–µ–º—è"] == data["time"]:
            row_num = i + 2
            sheet.update_cell(row_num, 3, data["car"])
            sheet.update_cell(row_num, 5, "–∑–∞–Ω—è—Ç–æ")
            sheet.update_cell(row_num, 6, data["name"])
            sheet.update_cell(row_num, 7, data["phone"])
            sheet.update_cell(row_num, 11, context._user_id)
            break

# === –•–µ–Ω–¥–ª–µ—Ä—ã Telegram ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["–°–µ—Ä–∏–∫ –ú–æ–ª–¥–∞–±–∞–µ–≤"], ["”ò–∑–≥–µ–ª –ë–µ–≥–ª–∞–Ω"]]
    await update.message.reply_photo("https://images2.imgbox.com/96/ac/8W57PB76_o.jpg", caption="–°–µ—Ä–∏–∫ –ú–æ–ª–¥–∞–±–∞–µ–≤ ‚Äì –∞–≤—Ç–æ–º–∞—Ç")
    await update.message.reply_photo("https://images2.imgbox.com/ef/b3/XCTTUIuJ_o.jpg", caption="”ò–∑–≥–µ–ª –ë–µ–≥–ª–∞–Ω ‚Äì –∞–≤—Ç–æ–º–∞—Ç –∏ –º–µ—Ö–∞–Ω–∏–∫–∞")
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return INSTRUCTOR

async def choose_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    instructor = update.message.text
    context.user_data["instructor"] = instructor
    reply_keyboard = [["–ê–≤—Ç–æ–º–∞—Ç"], ["–ú–µ—Ö–∞–Ω–∏–∫–∞"]] if instructor != "–°–µ—Ä–∏–∫ –ú–æ–ª–¥–∞–±–∞–µ–≤" else [["–ê–≤—Ç–æ–º–∞—Ç"]]
    reply_keyboard.append(["–ù–∞–∑–∞–¥"])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return CAR

async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await choose_car(update, context)
    context.user_data["car"] = update.message.text
    instructor = context.user_data["instructor"]
    records = get_active_sheet().get_all_records()
    dates = sorted(set(r["–î–∞—Ç–∞"] for r in records if r["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"] == instructor and r["–°—Ç–∞—Ç—É—Å"].lower() == "—Å–≤–æ–±–æ–¥–Ω–æ"))
    if not dates:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
        return ConversationHandler.END
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=ReplyKeyboardMarkup([[d] for d in dates] + [["–ù–∞–∑–∞–¥"]], one_time_keyboard=True))
    return DATE

async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await choose_date(update, context)
    context.user_data["date"] = update.message.text
    instructor, date = context.user_data["instructor"], context.user_data["date"]
    records = get_active_sheet().get_all_records()
    times = [r["–í—Ä–µ–º—è"] for r in records if r["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"] == instructor and r["–î–∞—Ç–∞"] == date and r["–°—Ç–∞—Ç—É—Å"].lower() == "—Å–≤–æ–±–æ–¥–Ω–æ"]
    if not times:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
        return ConversationHandler.END
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=ReplyKeyboardMarkup([[t] for t in times] + [["–ù–∞–∑–∞–¥"]], one_time_keyboard=True))
    return TIME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await choose_time(update, context)
    context.user_data["time"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], one_time_keyboard=True))
    return NAME

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await get_name(update, context)
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], one_time_keyboard=True))
    return PHONE

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        return await get_phone(update, context)
    context.user_data["phone"] = update.message.text
    context.user_data["telegram_id"] = update.effective_user.id
    save_booking_to_sheet(context)
    msg = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è {context.user_data['name']} –∑–∞–ø–∏—Å–∞–ª(-–∞—Å—å) –Ω–∞ —É—Ä–æ–∫ –≤–æ–∂–¥–µ–Ω–∏—è! –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: {context.user_data['instructor']}, –ú–∞—à–∏–Ω–∞: {context.user_data['car']}, –í—Ä–µ–º—è: {context.user_data['time']}, –î–∞—Ç–∞: {context.user_data['date']}"
    encoded = urllib.parse.quote(msg)
    url = f"https://wa.me/77070151513?text={encoded}"
    await update.message.reply_text(f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\nüëâ WhatsApp: {url}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç ===
async def monitor_payments(application):
    await asyncio.sleep(10)
    sheet = get_active_sheet()
    previous = sheet.get_all_records()
    while True:
        await asyncio.sleep(30)
        current = sheet.get_all_records()
        for i, row in enumerate(current):
            if i >= len(previous):
                continue
            prev = previous[i]
            tg_id = row.get("Telegram ID")
            if not tg_id:
                continue
            try:
                tg_id = int(tg_id)
            except ValueError:
                continue
            if row.get("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞") and not prev.get("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"):
                await application.bot.send_message(chat_id=tg_id, text=f"‚úÖ –í–∞—à–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {row['–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞']}‚Ç∏")
            if row.get("–û—Å—Ç–∞—Ç–æ–∫") and not prev.get("–û—Å—Ç–∞—Ç–æ–∫"):
                await application.bot.send_message(chat_id=tg_id, text=f"‚úÖ –í–∞—à –æ—Å—Ç–∞—Ç–æ–∫: {row['–û—Å—Ç–∞—Ç–æ–∫']}‚Ç∏")
        previous = current

# === FastAPI /ping endpoint –¥–ª—è Railway ===
@api_app.get("/ping")
def ping():
    return {"status": "ok"}

@api_app.head("/ping")
def ping_head():
    return JSONResponse(status_code=200)

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
@api_app.on_event("startup")
async def startup_event():
    global telegram_app
    scheduler = AsyncIOScheduler(timezone=timezone("Asia/Almaty"))
    job_queue = JobQueue()
    job_queue.scheduler = scheduler

    telegram_app = ApplicationBuilder().token(TOKEN).job_queue(job_queue).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            INSTRUCTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_car)],
            CAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    telegram_app.add_handler(conv_handler)
    await telegram_app.initialize()
    telegram_app.create_task(monitor_payments(telegram_app))
    await telegram_app.start()
    await telegram_app.updater.start_polling()
    print("‚úÖ –ë–æ—Ç –∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω—ã.")
