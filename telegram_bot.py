import urllib.parse
import gspread
import os, json
from google.oauth2.service_account import Credentials

# ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏ –æ–±–∞ scope'–∞
scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

creds_dict = json.loads(os.environ["GOOGLE_CREDENTIALS_JSON"])
creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
gc = gspread.authorize(creds)
sheet = gc.open("–ê–≤—Ç–æ—à–∫–æ–ª–∞ - –ó–∞–ø–∏—Å—å").worksheet("slots")

import logging
import asyncio
from pytz import timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes, JobQueue
)

logging.basicConfig(level=logging.INFO)

TOKEN = "8055643472:AAE-p7kVsyzHnUeFPgM1hnB7Q1Uu5LebPwQ"

INSTRUCTOR, CAR, DATE, TIME, NAME, PHONE = range(6)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["–°–µ—Ä–∏–∫ –ú–æ–ª–¥–∞–±–∞–µ–≤"], ["”ò–∑–≥–µ–ª –ë–µ–≥–ª–∞–Ω"]]
    await update.message.reply_photo(
        photo="https://images2.imgbox.com/96/ac/8W57PB76_o.jpg",
        caption="–°–µ—Ä–∏–∫ –ú–æ–ª–¥–∞–±–∞–µ–≤ ‚Äì –º–µ—Ö–∞–Ω–∏–∫–∞"
    )
    await update.message.reply_photo(
        photo="https://images2.imgbox.com/ef/b3/XCTTUIuJ_o.jpg",
        caption="”ò–∑–≥–µ–ª –ë–µ–≥–ª–∞–Ω ‚Äì –∞–≤—Ç–æ–º–∞—Ç –∏ –º–µ—Ö–∞–Ω–∏–∫–∞"
    )
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return INSTRUCTOR

async def choose_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    instructor = update.message.text
    context.user_data["instructor"] = instructor

    if instructor == "–°–µ—Ä–∏–∫ –ú–æ–ª–¥–∞–±–∞–µ–≤":
        reply_keyboard = [["–ê–≤—Ç–æ–º–∞—Ç"]]
    else:
        reply_keyboard = [["–ê–≤—Ç–æ–º–∞—Ç"], ["–ú–µ—Ö–∞–Ω–∏–∫–∞"]]

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return CAR


async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["car"] = update.message.text
    instructor = context.user_data["instructor"]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    records = sheet.get_all_records()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É –∏ —Å—Ç–∞—Ç—É—Å—É
    available_dates = sorted(list(set(
        row["–î–∞—Ç–∞"] for row in records
        if row["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"] == instructor and row["–°—Ç–∞—Ç—É—Å"].lower() == "—Å–≤–æ–±–æ–¥–Ω–æ"
    )))

    if not available_dates:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
        return ConversationHandler.END

    reply_keyboard = [[d] for d in available_dates]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —É—Ä–æ–∫–∞:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return DATE


async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date"] = update.message.text
    instructor = context.user_data["instructor"]
    date = context.user_data["date"]

    records = sheet.get_all_records()

    available_times = [
        row["–í—Ä–µ–º—è"] for row in records
        if row["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"] == instructor and row["–î–∞—Ç–∞"] == date and row["–°—Ç–∞—Ç—É—Å"].lower() == "—Å–≤–æ–±–æ–¥–Ω–æ"
    ]

    if not available_times:
        await update.message.reply_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
        return ConversationHandler.END

    reply_keyboard = [[t] for t in available_times]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return TIME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
    return NAME

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7707...):")
    return PHONE


async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text

    instructor = context.user_data["instructor"]
    car = context.user_data["car"]
    date = context.user_data["date"]
    time = context.user_data["time"]
    name = context.user_data["name"]
    phone = context.user_data["phone"]

    # üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bookings
    save_booking_to_sheet(context)

    # üìû —Å–æ–∑–¥–∞—ë–º WhatsApp —Å—Å—ã–ª–∫—É
    whatsapp_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è {name} –∑–∞–ø–∏—Å–∞–ª(-–∞—Å—å) –Ω–∞ —É—Ä–æ–∫ –≤–æ–∂–¥–µ–Ω–∏—è! "
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: {instructor}, –í—Ä–µ–º—è: {time}, –î–∞—Ç–∞: {date}"
    )

    encoded_message = urllib.parse.quote(whatsapp_message)
    whatsapp_url = f"https://wa.me/77070151513?text={encoded_message}"

    await update.message.reply_text(f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                                    f"üëâ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ WhatsApp:\n{whatsapp_url}")

    return ConversationHandler.END


def save_booking_to_sheet(context):
    booking_sheet = gc.open("–ê–≤—Ç–æ—à–∫–æ–ª–∞ - –ó–∞–ø–∏—Å—å").worksheet("bookings")
    slots_sheet = gc.open("–ê–≤—Ç–æ—à–∫–æ–ª–∞ - –ó–∞–ø–∏—Å—å").worksheet("slots")

    instructor = context.user_data["instructor"]
    car = context.user_data["car"]
    date = context.user_data["date"]
    time = context.user_data["time"]
    name = context.user_data["name"]
    phone = context.user_data["phone"]

    # 1. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ bookings
    booking_sheet.append_row([name, instructor, car, date, time, phone])

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ slots
    records = slots_sheet.get_all_records()
    for i, row in enumerate(records):
        if row["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"] == instructor and row["–î–∞—Ç–∞"] == date and row["–í—Ä–µ–º—è"] == time:
            cell_row = i + 2  # +2, –ø–æ—Ç–æ–º—É —á—Ç–æ get_all_records –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
            slots_sheet.update_cell(cell_row, 5, "–∑–∞–Ω—è—Ç–æ")  # –∫–æ–ª–æ–Ω–∫–∞ E (5-—è)
            break


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë—Ä–æ–Ω—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    from pytz import timezone
    from apscheduler.schedulers.asyncio import AsyncIOScheduler
    from telegram.ext import JobQueue

    # 1. –°–æ–∑–¥–∞—ë–º —Ç–∞–π–º–∑–æ–Ω—É
    scheduler = AsyncIOScheduler(timezone=timezone("Asia/Almaty"))

    # 2. –°–æ–∑–¥–∞—ë–º job_queue —Å –∑–∞–¥–∞–Ω–Ω—ã–º scheduler (–ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ä—É—á–Ω—É—é!)
    job_queue = JobQueue()
    job_queue.scheduler = scheduler

    # 3. –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).job_queue(job_queue).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            INSTRUCTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_car)],
            CAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == "__main__":
    main()


